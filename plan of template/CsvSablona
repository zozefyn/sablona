/*
 * MIT License
 * Copyright (c) 2017 Gymnazium Nad Aleji
 * Copyright (c) 2017 Vojtech Horky
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import java.io.FileNotFoundException;
import java.util.Map;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;

public class CsvSablona {
	public static void main (String [] args) {
		Options moznosti = new Options (args);
		if (moznosti.getCsvPath ()== null) { 
			System.out.println ("Error - missing argument -- csv");
			System.exit (1);
		} else if (moznosti.getTemplatePath ()== null) {
			System.out.println ("Error - missing argument -- template");
			System.exit (2); //system zavola na toto, pokud uzivatel nezada potrebne informace, nebo je nezada vubec
		}
		CsvParser csv = new CsvParser (moznosti.getCsvPath ());
		Template slozenka = new Template (moznosti.getTemplatePath ());
		

		int pocitadlo = 1;
		Map <String, String> nahrady;
		while ((nahrady = csv.getNextReplacements ())!= null) { //kdyz uzivatel nezada nic potrebneho
			String vysledek = slozenka.render (nahrady);
			String outputPath = String.format (moznosti.getOutputPattern (), pocitadlo++);

			try {
				PrintWriter zapisovac = new PrintWriter (outputPath, "UTF-8");
				zapisovac.print (vysledek);
				zapisovac.close ();
			} catch (FileNotFoundException e) {
				System.out.println ("Error - unable to write file:" +outputPath);
				e.printStackTrace ();
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace ();
				//toto zapisuje vyplnene sablony do urciteho souboru
			}

		}


	}

}